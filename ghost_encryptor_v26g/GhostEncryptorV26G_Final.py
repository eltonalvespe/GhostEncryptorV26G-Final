# GhostEncryptorV26G_Final.py

import os
from .ghash import GHash
from .ghost_operator_g import GhostOperatorG
from .ghost_matrix_cipher_g import GhostMatrixCipherG
from .ghost_compressor_g_symbolic import GhostCompressorG
from .ghost_mac_g import GhostMACG
from .ghost_pq_hybrid import simulate_kyber_encapsulate, simulate_kyber_decapsulate  # Suporte p√≥s-qu√¢ntico real
from .ghost_pq_hybrid import GhostPQHybrid  # Simula√ß√£o de integra√ß√£o com criptografia p√≥s-qu√¢ntica (PQ)

# class GhostEncryptorV26G
# Esta classe implementa a criptografia e descriptografia usando a √Ålgebra G.
# Ela utiliza um operador G, cifragem de matriz, compress√£o simb√≥lica e MAC-G.
# A implementa√ß√£o √© baseada em conceitos de criptografia moderna e t√©cnicas de seguran√ßa.
# A classe √© escrita em Python e utiliza bibliotecas padr√£o para opera√ß√µes de criptografia.
# A classe tamb√©m inclui m√©todos para criptografar e descriptografar arquivos, garantindo que os dados possam ser recuperados corretamente.

class GhostEncryptorV26G:
    def __init__(self, seed: bytes = b"default_seed"):
        # Garante que seed √© bytes
        if isinstance(seed, str):
            seed = seed.encode('utf-8')

        self.seed = seed
        self.operator_g = GhostOperatorG(self.seed)
        self.cipher = GhostMatrixCipherG(self.seed)
        self.compressor = GhostCompressorG(seed=self.seed)
        self.mac = GhostMACG(self.seed)
        self.last_recovered_extension = None
        self.last_recovered_data = None

    def encrypt(self, plaintext: str) -> bytes:
        # Entrada pode ser string, convertemos para bytes
        if isinstance(plaintext, str):
            plaintext = plaintext.encode('utf-8')

        print("[üîµ] Iniciando criptografia com V26G...")

        # Compress√£o simb√≥lica
        compressed = self.compressor.compress(plaintext)
        print("[üîµ] Compress√£o simb√≥lica conclu√≠da.")
        assert compressed.startswith(b'\x00G'), "[DEBUG] Compress√£o simb√≥lica n√£o gerou flag esperada"

        # Aplicar operador G
        print(f"[DEBUG] Compressed antes do operador G: {compressed[:40]}...")
        transformed = self.operator_g.apply_operator_sequence(compressed)
        print("[üîµ] Transforma√ß√µes G aplicadas.")

        # Gerar chave p√∫blica e segredo compartilhado determin√≠stico (Kyber real/simulado)
        pubkey, shared_secret = simulate_kyber_encapsulate(self.seed)
        print("[üîµ] Chave p√∫blica e segredo compartilhado gerados com sucesso.")

        # Deriva√ß√£o da chave de sess√£o
        final_key = shared_secret[:32]
        iv = final_key[:16]  # deriva√ß√£o simples de IV
        encrypted = self.cipher.encrypt_gcbc(transformed, iv, rounds=9)

        # MAC-G para integridade
        mac = self.mac.generate_mac(encrypted)
        print("[üîµ] Criptografia h√≠brida finalizada com sucesso.")

        # Estrutura: pubkey (32) + mac (64) + ciphertext
        return pubkey + mac + encrypted

    def decrypt(self, ciphertext: bytes) -> str:
        print("[üîπ] Iniciando descriptografia com V26G...")

        if not isinstance(ciphertext, bytes):
            raise TypeError("O ciphertext deve estar em formato bytes!")

        pubkey = ciphertext[:32]
        mac = ciphertext[32:96]
        encrypted = ciphertext[96:]

        # Verifica√ß√£o do MAC-G
        if not self.mac.verify_mac(encrypted, mac):
            raise ValueError("MAC-G falhou! Dados comprometidos.")
        print("[üîπ] MAC-G validado com sucesso.")

        # Simula a recupera√ß√£o do segredo compartilhado
        _, shared_secret = simulate_kyber_encapsulate(self.seed)
        final_key = shared_secret[:32]

        # Decifra os dados
        iv = final_key[:16]  # deriva√ß√£o simples de IV
        decrypted = self.cipher.decrypt_gcbc(encrypted, iv, rounds=9)

        # Reverter transforma√ß√µes G
        restored = self.operator_g.apply_operator_sequence(decrypted, reverse=True)
        print("[üîπ] Operador G revertido com sucesso.")
        assert restored.startswith(b'\x00G'), "[DEBUG] Flag de compress√£o simb√≥lica corrompida ap√≥s restaura√ß√£o"

        # Descompress√£o simb√≥lica
        decompressed = self.compressor.decompress(restored)
        print("[üîπ] Descompress√£o simb√≥lica conclu√≠da.")

        try:
            # Garante que o retorno seja sempre bytes
            if isinstance(decompressed, str):
                return decompressed.encode("utf-8")
            elif isinstance(decompressed, bytes):
                return decompressed
            else:
                raise TypeError("Tipo inesperado ap√≥s descompress√£o.")
    
        except UnicodeDecodeError as e:
            print("[ERRO DE DECODIFICA√á√ÉO UTF-8]", e)
            print("[DADOS BRUTOS]:", decompressed)
            raise
    
###----------------------------------------------------------------------------------###
    def encryptFile(input_path: str, output_path: str, encrypt_fn) -> None:
        """
        L√™ um arquivo, criptografa seu conte√∫do e salva em outro arquivo.

        Args:
            input_path (str): Caminho do arquivo de entrada.
            output_path (str): Caminho do arquivo criptografado.
            encrypt_fn (Callable[[bytes], bytes]): Fun√ß√£o de criptografia que recebe e retorna bytes.
        """
        with open(input_path, 'rb') as f:
            raw_data = f.read()

        encrypted_data = encrypt_fn(raw_data)

        with open(output_path, 'wb') as f:
            f.write(encrypted_data)

        print(f"[üîê] Arquivo '{input_path}' criptografado e salvo como '{output_path}'.")


    def decryptFile(input_path: str, output_path: str, decrypt_fn) -> None:
        """
        L√™ um arquivo criptografado, descriptografa seu conte√∫do e salva no destino.

        Args:
            input_path (str): Caminho do arquivo criptografado.
            output_path (str): Caminho do arquivo de sa√≠da descriptografado.
            decrypt_fn (Callable[[bytes], bytes]): Fun√ß√£o de descriptografia que recebe e retorna bytes.
        """
        with open(input_path, 'rb') as f:
            encrypted_data = f.read()

        decrypted_data = decrypt_fn(encrypted_data)

        with open(output_path, 'wb') as f:
            f.write(decrypted_data)

        print(f"[üîì] Arquivo '{input_path}' descriptografado e salvo como '{output_path}'.")
    ###----------------------------------------------------------------------------------###
    
    def encryptByte(self, plaintext: bytes) -> bytes:
        print("[üü¢] Iniciando criptografia com V26G...")

        if not isinstance(plaintext, bytes):
            raise TypeError("O plaintext deve estar em formato bytes!")

        # Compress√£o simb√≥lica
        compressed = self.compressor.compress(plaintext)
        print("[üü¢] Compress√£o simb√≥lica conclu√≠da.")

        # Aplicar transforma√ß√µes G
        transformed = self.operator_g.apply_operator_sequence(compressed)
        print("[üü¢] Transforma√ß√µes G aplicadas.")

        # Simula a gera√ß√£o de chave p√∫blica e segredo compartilhado determin√≠stico
        pubkey, shared_secret = simulate_kyber_encapsulate(self.seed)
        final_key = shared_secret[:32]
        print("[üü¢] Chave p√∫blica e segredo compartilhado gerados.")

        # Cifra os dados com GCBC (baseado na √Ålgebra G)
        iv = final_key[:16]
        ciphertext = self.cipher.encrypt_gcbc(transformed, iv, rounds=9)
        print("[üü¢] Cifra GCBC conclu√≠da.")

        # Gera o MAC-G para integridade
        mac = self.mac.generate_mac(ciphertext)
        print(f"[üü¢] MAC-G gerado: {mac}")

        # Monta o resultado final: pubkey (32) + mac (64) + ciphertext
        final_output = pubkey + mac + ciphertext
        print("[üü¢] Criptografia finalizada com sucesso.")

        return final_output

    def decryptByte(self, ciphertext: bytes) -> bytes:
        print("[üîπ] Iniciando descriptografia de arquivo com V26G...")

        if not isinstance(ciphertext, bytes):
            raise TypeError("O ciphertext deve estar em formato bytes!")

        pubkey = ciphertext[:32]
        mac = ciphertext[32:96]
        encrypted = ciphertext[96:]

        # Verifica√ß√£o do MAC-G
        if not self.mac.verify_mac(encrypted, mac):
            raise ValueError("MAC-G falhou! Dados comprometidos.")
        print("[üîπ] MAC-G validado com sucesso.")

        # Recupera o segredo compartilhado determin√≠stico
        _, shared_secret = simulate_kyber_encapsulate(self.seed)
        final_key = shared_secret[:32]

        # Decifra os dados
        iv = final_key[:16]
        decrypted = self.cipher.decrypt_gcbc(encrypted, iv, rounds=9)

        # Reverte transforma√ß√µes G
        restored = self.operator_g.apply_operator_sequence(decrypted, reverse=True)
        print("[üîπ] Operador G revertido com sucesso.")
        assert restored.startswith(b'\x00G'), "[DEBUG] Flag de compress√£o simb√≥lica corrompida ap√≥s restaura√ß√£o"

        # Descompress√£o simb√≥lica
        decompressed = self.compressor.decompress(restored)
        print("[üîπ] Descompress√£o simb√≥lica conclu√≠da.")

        # Retorna sempre como bytes
        if isinstance(decompressed, str):
            return decompressed.encode("utf-8")
        elif isinstance(decompressed, bytes):
            return decompressed
        else:
            raise TypeError("Tipo inesperado ap√≥s descompress√£o.")
